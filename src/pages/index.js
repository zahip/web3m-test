import { useState, useMemo } from "react";
import Head from "next/head";
import { Inter } from "next/font/google";

import MultiSelectDropbox from "@/components/shared/MultiSelectDropbox/MultiSelectDropbox";
import ItemDetails from "@/components/ItemDetails/ItemDetails";
import Dialog from "@/components/shared/Dialog/Dialog";
import Button from "@/components/shared/Button/Button";

import { deleteFromDictionary } from "@/utils/deleteFromDictionary";
import { isObjectEmpty } from "@/utils/isObjectEmpty";

import useFetch from "@/hooks/useFetch";

import styles from "@/styles/Home.module.scss";

const inter = Inter({ subsets: ["latin"] });

const items = [
  { id: 1, name: "Apple" },
  { id: 2, name: "Carrot" },
  { id: 3, name: "Melone" },
  { id: 4, name: "Pear" },
  { id: 5, name: "Lemon" },
  { id: 6, name: "Orange" },
  { id: 7, name: "Salad" },
];

export default function Home() {
  const [itemsList, setItemsList] = useState(items);
  const [selectedList, setSelectedList] = useState({});
  // const [loading, setLoading] = useState(false);
  const [dialogMessage, setDialogMessage] = useState("");

  const { handleFetch, loading } = useFetch();

  const filteredItemList = useMemo(
    () => Object.values(selectedList).filter((item) => item.quantity > 0),
    [selectedList]
  );

  const handleClickDropboxItem = async (itemObj) => {
    const data = await handleFetch(
      `${process.env.NEXT_PUBLIC_API}/${itemObj.name.toLowerCase()}`
    );
    console.log(data);
    if (data.error) {
      setDialogMessage(data.error);
    } else {
      if (data.stock === 0) {
        setDialogMessage(`Sorry, ${data.name} not in stock`);
      } else {
        setItemsList((prevItemList) =>
          prevItemList.filter((item) => item.id !== itemObj.id)
        );
        setSelectedList((prevSelectedList) => ({
          ...prevSelectedList,
          [data.id]: { ...data, quantity: 0 },
        }));
      }
    }
  };

  const handleRemoveCardItem = (item) => {
    const dictionaryAfterDelete = deleteFromDictionary(item.id, selectedList);
    setSelectedList(dictionaryAfterDelete);
    setItemsList((prevItemList) => [...prevItemList, item]);
  };

  const handleSubmit = async () => {
    const body = filteredItemList.map((item) => ({
      id: item.id,
      amount: item.quantity,
    }));
    const requestOptions = {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body),
    };
    const data = await handleFetch(process.env.NEXT_PUBLIC_API, requestOptions);
    setDialogMessage(data.message);
  };

  return (
    <>
      <Head>
        <title>web3m-test</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <MultiSelectDropbox
          dataList={itemsList}
          placeholderText="Select to add item to basket"
          handleClick={handleClickDropboxItem}
        />

        {loading && <div>loading...</div>}

        {!isObjectEmpty(selectedList) && (
          <>
            <div className={styles["items-list-card-container"]}>
              {Object.values(selectedList).map((item) => (
                <ItemDetails
                  key={item.id}
                  item={item}
                  handleClick={handleRemoveCardItem}
                  setSelectedList={setSelectedList}
                />
              ))}
            </div>
            <hr className="solid" />
            <div className={styles["section-title"]}>Item list:</div>
            <ul>
              {filteredItemList.map(({ id, name, quantity }) => (
                <li className={styles["list-item-row"]} key={id}>
                  <span>{name}</span>
                  <span className={styles["dashed-container"]}>
                    <hr className="dashed" />
                  </span>
                  <span>{quantity}KG</span>
                </li>
              ))}
            </ul>
            <div>
              <div className={styles["section-title"]}>Total price: </div>
              <div>
                <span>$</span>
                <span>
                  {filteredItemList.reduce(
                    (acc, currentVal) =>
                      acc + currentVal.price * currentVal.quantity,
                    0
                  )}
                </span>
              </div>
            </div>

            <div className={styles["btn-container"]}>
              <Button onClick={handleSubmit}>Submit</Button>
            </div>
          </>
        )}

        <Dialog
          open={dialogMessage}
          title={dialogMessage}
          setOpenDialog={() => setDialogMessage("")}
        />
      </main>
    </>
  );
}
